/**
 * Library reactors for the IMU on the 
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * Note that these reactors rely on the fact that they are executed in an unthreaded
 * runtime. To adapt them for a threaded runtime, they will need to use mutual
 * exclusion to ensure that multiple instances of the reactors are not simultaneously
 * accessing the shared hardware resource.
 * 
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
  files: ["../../robot-lib/"],                      // Needed to find imu.h
  cmake-include: ["../../robot-lib/robot-lib.txt"]  // Needed to find imu.h
}

preamble {=
  #include <pico/stdlib.h>
  #include <imu.h>
=}

/**
 * Base class for IMU reactors.
 */
reactor IMUBase {
  preamble {=
    // Static global IMU instance struct.
    static imu_inst_t imu_instance;
    // Boolean to ensure the IMU instance is initialized only once.
    static bool _pololu_robot_imu_initialized = false;
  =}

  input trigger:bool;
    
  output x:float;
  output y:float;
  output z:float;

  reaction(startup) {=
    if (!_pololu_robot_imu_initialized) {
      _pololu_robot_imu_initialized = true;
      imu_init(&imu_instance);
    }
  =}
}

/**
 * When triggered by an input (whose value is ignored), sample the accelerometer
 * on the <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * The accelerometer is provided by an
 * <a href="https://www.pololu.com/file/0J1899/lsm6dso.pdf">ST LMS6DSO inertial measurement unit</a>.
 * The outputs give acceleration in <i>g</i>'s with a range of -2 to +2 <i>g</i>
 * and a sensitivity of approximately 0.061 <i>mg</i>'s.
 */
reactor Accelerometer extends IMUBase {  
  reaction(trigger) -> x, y, z {= 
    axes_data_t acc_data;
    imu_read_acc(&imu_instance, &acc_data);

    lf_set(x, acc_data.x);
    lf_set(y, acc_data.y);
    lf_set(z, acc_data.z);   
  =}
}

/**
 * When triggered by an input (whose value is ignored), sample the gyroscope
 * on the <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * The gyroscope is provided by an
 * <a href="https://www.pololu.com/file/0J1899/lsm6dso.pdf">ST LMS6DSO inertial measurement unit</a>.
 * The outputs give angular velocity in degrees per second.
 */
 reactor Gyro extends IMUBase {
  reaction(trigger) -> x, y, z {=
    axes_data_t gyro_data;
    imu_read_gyro(&imu_instance, &gyro_data);
    lf_set(x, gyro_data.x);
    lf_set(y, gyro_data.y);
    lf_set(z, gyro_data.z);
  =}
}

/**
 * Integrate the sequence of inputs using the trapezoidal method.
 * The first output is always zero.  Subsequent outputs are the
 * sum of the current and previous inputs multiplied by the time
 * interval since the last input (in seconds) divided by two.
 */
reactor TrapezoidalIntegrator {
  input in:float
  output out:float
  reset state s:float = 0
  reset state prev_in:float = 0
  reset state prev_time:instant_t = 0
  reaction(in) -> out {=
    instant_t now = lf_time_logical();
    if (self->prev_time > SEC(0)) {
      float interval = ((now - self->prev_time) * 1e-9);
      self->s += (in->value + self->prev_in) * interval / 2;
    }
    lf_set(out, self->s);
    self->prev_in = in->value;
    self->prev_time = now;
  =}
}

/**
 * When triggered by an input (whose value is ignored), sample the gyroscope
 * on the <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>
 * and integrate its output.  The output is an estimate of the angle (in degrees)
 * of the robot relative to its angle when first triggered along each of three axes.
 * The gyroscope is provided by an
 * <a href="https://www.pololu.com/file/0J1899/lsm6dso.pdf">ST LMS6DSO inertial measurement unit</a>.
 */
 reactor GyroAngle {
  input trigger:bool;
    
  output x:float;
  output y:float;
  output z:float;

  g = new Gyro()
  integrator1 = new TrapezoidalIntegrator()
  integrator2 = new TrapezoidalIntegrator()
  integrator3 = new TrapezoidalIntegrator()

  trigger -> g.trigger
  g.x, g.y, g.z -> integrator1.in, integrator2.in, integrator3.in
  integrator1.out, integrator2.out, integrator3.out -> x, y, z
}
