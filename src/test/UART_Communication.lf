/**
  * i2c
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }

  preamble {=
    //..
  =}
  
  main reactor {
    preamble {=
      #include <stdio.h>
      #include "pico/stdlib.h"
      #include "hardware/uart.h"

      /// \tag::hello_uart[]

      #define UART_ID uart0
      #define BAUD_RATE 115200

      // We are using pins 0 and 1, but see the GPIO function select table in the
      // datasheet for information on which other pins can be used.
      #define UART_TX_PIN 0
      #define UART_RX_PIN 1
    =}
    
    timer t(0, 100ms)

    reaction (startup) {=
      printf("Setting up the UART with the BAUD Rate.\n");
      // Set up our UART with the required speed.
      uart_init(UART_ID, BAUD_RATE);

      // Set the TX and RX pins by using the function select on the GPIO
      // Set datasheet for more information on function select
      printf("Setting up the UART GPIO Pins");
      gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
      gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
    =}

    reaction (t) {=
        printf("Sending data over the UART.\n");
        // Use some the various UART functions to send out data
        // In a default system, printf will also output via the default UART

        // Send out a character without any conversions
        uart_putc_raw(UART_ID, 'A');

        // Send out a character but do CR/LF conversions
        uart_putc(UART_ID, 'B');

        // Send out a string, with CR/LF conversions
        uart_puts(UART_ID, " Hello, UART!\n");
    
    =}

  }



  