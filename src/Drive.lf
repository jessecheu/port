/**
 * Drives the Pololu 3pi+ 2040 Robot using lines on the ground as guidance. 
 * It uses two lines spaced apart to check if there is drift by using line sensors. 
 * and then corrects itself by rotating the wheel respectively.
 * This iteration uses feedback with the motors so it can turn.
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }
  
  import Line from "lib/Line.lf"
  import Display from "lib/Display.lf"
  import Motors from "lib/Motors.lf"
  import GyroAngle from "lib/IMU.lf"
  import Encoders from "lib/Encoders.lf"
  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    line = new Line()
    disp = new Display()
    motor = new Motors()
    gyro = new GyroAngle()
    encoder = new Encoders()

  
    timer t(0, sample_period)
    timer seconds(0, 1 s)
    timer end_calibration(calibration_time)
    state angle_before_turn: float = 0
    timer backup(0, 500 ms)

    state distance:float = 0
    state turn_dir:bool = 0
    //Calibrating the line sensors
    reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
      lf_set(disp.line0, "CALIBRATING");
      lf_set(disp.line1, "Roll robot over");
      lf_set(disp.line2, "light and dark.");
      
    =}

    reaction(end_calibration) -> line.calibrate, motor.left_power, motor.right_power {=
      lf_set(line.calibrate, false);
      lf_set(motor.left_power, 0.10f);
      lf_set(motor.right_power, 0.10f);
    =}
  
    reaction(t) -> line.trigger, gyro.trigger {=
      lf_set(line.trigger, true);
      lf_set(gyro.trigger, true);
    =}
  
    initial mode DRIVE {
        reaction(line.reflect) gyro.z -> TURN_CORNER, motor.left_power, motor.right_power, disp.line0, disp.line1, disp.line2, disp.line3 {= 
          //Logic for driving
          //Printing to the LED Screen
          static char buf0[17];
          static char buf1[17];
          static char buf2[17];
          static char buf3[17];

          //Robot: Aim to keep the robot moving forward by 
          //using the center line sensor which is line[2] 

          if (line.reflect->value[1] > 700) {
            //Adjusting the robot to the right if the left sensor is detected
            lf_set(motor.left_power, 0.075f);
            lf_set(motor.right_power, 0.1f);
            snprintf(buf0, 17, "Left Sensor Detected");
          } else {
            snprintf(buf0, 17, " ");
          }

          if(line.reflect->value[2] > 800) {
            lf_set(motor.left_power, 0.1f);
            lf_set(motor.right_power, 0.1f);
            snprintf(buf1, 17, "Centered");
          } else {
            snprintf(buf1, 17, " ");
          }

          if (line.reflect->value[3] > 700) {
            //Adjusting the robot to the left if the right sensor is detected
            lf_set(motor.left_power, 0.1f);
            lf_set(motor.right_power, 0.075f);
            snprintf(buf2, 17, "Right Sensor Detected");
          } else {
            snprintf(buf2, 17, " ");
          }

          if (line.reflect->value[4] >= 1000) {
            //When the most rightmost line sensor detects a black line, 
            //this means that there is a turn. We turn 90degrees to the right.
            // lf_set(motor.left_power, 0.15f);
            // lf_set(motor.right_power, 0.1f);'
            lf_set(motor.left_power, 0.20);
            lf_set(motor.right_power, -0.075f);
            self->angle_before_turn = gyro.z->value;
            snprintf("TURN RIGHT");
            self->turn_dir = 1;
            lf_set_mode(TURN_CORNER);
            
          }


          if (line.reflect->value[0] >= 1000) {
            //When the most rightmost line sensor detects a black line, 
            //this means that there is a turn. We turn 90degrees to the right.
            // lf_set(motor.left_power, 0.15f);
            // lf_set(motor.right_power, 0.1f);'
            lf_set(motor.left_power, -0.075f);
            lf_set(motor.right_power, 0.20f);
            self->angle_before_turn = gyro.z->value;
            snprintf("TURN LEFT");
            self->turn_dir = 0;
            lf_set_mode(TURN_CORNER);
          }


          lf_set(disp.line0, buf0);
          lf_set(disp.line1, buf1);
          lf_set(disp.line2, buf2);
          lf_set(disp.line3, buf3);
        =} 
        
  
    }

    mode TURN_CORNER { 
      //Use gyro to check if the turn has been made completely before changing to DRIVE mode again

      // reaction(gyro.z) -> DRIVE, motor.left_power, motor.right_power, disp.line0, disp.line3 {=
      //   //gyro.z = -90, angle_before_turn = -10, result = -80
      //   lf_set(disp.line0, "TURN_CORNER Mode");
      //   if (abs(gyro.z->value - self->angle_before_turn) >= 80) {
      //     lf_set(motor.left_power, 0.1);
      //     lf_set(motor.right_power, 0.1);
      //     lf_set(disp.line3, " ");
      //     lf_set_mode(DRIVE);
      //   }
      // =}

      // Turns using feedback control
      reaction(gyro.z) -> DRIVE, motor.left_power, motor.right_power, disp.line0, disp.line3 {=
        lf_set(disp.line0, "TURN_CORNER Mode");
        if(abs(gyro.z->value - self->angle_before_turn >= 90)) {
          lf_set(motor.left_power, 0.1);
          lf_set(motor.right_power, 0.1);
          lf_set(disp.line3, " ");
          lf_set_mode(DRIVE);
        }
        if(self->turn_dir) {
          if (line.reflect->value[1] > 700) {
            //Adjusting the robot to the right if the left sensor is detected
            lf_set(motor.left_power, -0.08f);
            lf_set(motor.right_power, 0.0175f);
            snprintf(buf0, 17, "Left Sensor Detected");
          } else {
            snprintf(buf0, 17, " ");
          }

          if(line.reflect->value[2] > 800) {
            lf_set(motor.left_power, -0.075f);
            lf_set(motor.right_power, 0.2f);
            snprintf(buf1, 17, "Centered");
          } else {
            snprintf(buf1, 17, " ");
          }

          if (line.reflect->value[3] > 700) {
            //Adjusting the robot to the left if the right sensor is detected
            lf_set(motor.left_power, -0.05f);
            lf_set(motor.right_power, 0.075f);
            snprintf(buf2, 17, "Right Sensor Detected");
          } else {
            snprintf(buf2, 17, " ");
        }
        }else{
          if (line.reflect->value[1] > 700) {
            //Adjusting the robot to the right if the left sensor is detected
            lf_set(motor.left_power, 0.175f);
            lf_set(motor.right_power, -0.1f);
            snprintf(buf0, 17, "Left Sensor Detected");
          } else {
            snprintf(buf0, 17, " ");
          }

          if(line.reflect->value[2] > 800) {
            lf_set(motor.left_power, 0.2f);
            lf_set(motor.right_power, -0.075f);
            snprintf(buf1, 17, "Centered");
          } else {
            snprintf(buf1, 17, " ");
          }

          if (line.reflect->value[3] > 700) {
            //Adjusting the robot to the left if the right sensor is detected
            lf_set(motor.left_power, 0.225f);
            lf_set(motor.right_power, -0.05f);
            snprintf(buf2, 17, "Right Sensor Detected");
          } else {
            snprintf(buf2, 17, " ");
        }
        }
      =}
    }
      
  }
  