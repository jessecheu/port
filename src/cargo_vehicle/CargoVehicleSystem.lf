/**
 * The main menu for the Cargo Vehicle built upon the Pololu 3pi+ rp2040 Robot. 
 * Allows to switch the drive mode, stop mode, and other modes.
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }
  
  import Line from "../lib/Line.lf"
  import Display from "../lib/Display.lf"
  import Motors from "../lib/Motors.lf"
  import GyroAngle from "../lib/IMU.lf"
  import Encoders from "../lib/Encoders.lf"
  import Buttons from "../lib/Buttons.lf"
  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    preamble {=
      #define 
    
    =}
    line = new Line()
    disp = new Display()
    motor = new Motors()
    gyro = new GyroAngle()
    encoder = new Encoders()
    buttons = new Buttons();

  
    timer t(0, sample_period)
    timer seconds(0, 1 s)
    timer end_calibration(calibration_time)

    state calibration_time_count: int = 0
    state button_press_time: int = 0
    state button_time_required: int = 2

    reaction(t) -> line.trigger, buttons.trigger {=
      lf_set(line.trigger, true);
      lf_set(buttons.trigger, true);
    =}
  
    initial mode MAIN_MODE {
        //Menu for the Cargo 
        //Uses Buttons to control which mode to be in.
        reaction(t) -> disp.line0, disp.line1, disp.line2, disp.line3 {= 
          static char buf0[17];
          static char buf1[17];
          static char buf2[17];
          static char buf3[17];
          snprintf(buf0, 17, "[A]: Calibration Mode");
          snprintf(buf1, 17, "[B]: DRIVE Mode");
          snprintf(buf2, 17, "[C]: STOP MODE");
          snprintf(buf3, 17, "PORT Project");
          lf_set(disp.line0, buf0);
          lf_set(disp.line1, buf1);
          lf_set(disp.line2, buf2);
          lf_set(disp.line3, buf3);
        =}

        //Checking buttons
        reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> CALIBRATION_MODE, DRIVE_MODE, STOP_MODE {=
          //User needs to hold the button for atleast 2 seconds. Reason: Incase we want to hold multiple buttons down
          if (buttons.button_a->value || buttons.button_b->value || buttons.button_c->value) {
            //increments the button press time
            button_press_time = button_press_time + 1;
          } else {
            button_press_time = 0;
          }
          //
          if (buttons.button_a->value && self->button_press_time >= self->button_time_required) {
            lf_set_mode(CALIBRATION_MODE)
          } else if ()
        =}
    }

    mode CALIBRATION_MODE { 

      /* Entering the Calibration mode and stops it after x amount of seconds*/
      reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
        lf_set(disp.line0, "CALIBRATING");
        lf_set(disp.line1, "Roll robot over");
        lf_set(disp.line2, "light and dark.");
      =}  

      reaction(seconds) -> disp.line3 {=
        static char buf[17];
        snprintf(buf, 17, "time:%8d s", self->calibration_time_count++);
        lf_set(disp.line3, buf);
      =}

      reaction(end_calibration) -> line.calibrate {=
        lf_set(line.calibrate, false);
      =}

      /* After calibration mode, allows for users to see on the LED screen the line encoder values*/
      reaction(line.reflect) -> disp.line0, disp.line1, disp.line2 {=
        static char buf0[17];
        static char buf1[17];
        static char buf2[17];
        snprintf(buf0, 17, "0:%4d 1:%4d", line.reflect->value[0], line.reflect->value[1]);
        snprintf(buf1, 17, "2:%4d 3:%4d", line.reflect->value[2], line.reflect->value[3]);
        snprintf(buf2, 17, "4:%4d", line.reflect->value[4]);
        lf_set(disp.line0, buf0);
        lf_set(disp.line1, buf1);
        lf_set(disp.line2, buf2);
      =}
    }

    mode DRIVE_MODE {

    }

    mode STOP_MODE {

    }
  
  }
  