/**
 * The main menu for the Cargo Vehicle built upon the Pololu 3pi+ rp2040 Robot. 
 * Allows to switch the drive mode, stop mode, and other modes.
 */
 target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
}

import Line from "../lib/Line.lf"
import Display from "../lib/Display.lf"
import Motors from "../lib/Motors.lf"
import GyroAngle from "../lib/IMU.lf"
import Encoders from "../lib/Encoders.lf"
import Buttons from "../lib/Buttons.lf"

reactor AngleToDistance {
  input degrees:int32_t
  output distance:float

  reaction(degrees) -> distance {=
    lf_set(distance, degrees->value*(9.975/360)); //cm units
  =}

}

main reactor(calibration_time: time = 10 s, sample_period: time = 25 ms) {
  preamble {=
      #include <stdio.h>
      #include "pico/stdlib.h"
      #include "hardware/uart.h"


      // / \tag::hello_uart[]

      #define UART_ID uart0
      #define BAUD_RATE 115200
      // We are using pins 0 and 1, but see the GPIO function select table in the
      // datasheet for information on which other pins can be used.
      #define UART_TX_PIN 28
      #define UART_RX_PIN 29
  =}

  line = new Line()
  disp = new Display()
  motor = new Motors()
  gyro = new GyroAngle()
  encoder = new Encoders()
  buttons = new Buttons();
  angleToDistance = new AngleToDistance();


  timer t(0, sample_period)
  timer trigger_time(0, 25 ms);
  timer button_trigger_time(0, 150ms);
  timer seconds(0, 1 s)
  timer driving_forward_timer(0, 100ms);
  timer crane_countdown_timer(0, 1s);
  //timer standby(0, 5 s)
  
  //Calibration Related
  timer end_calibration(calibration_time)
  state calibration_startup: bool = true
  state calibration_time_count: int = 0

  state angle_before_turn: float = 0
  state button_press_time: int = 0

  //Driving Related
  state temp_driving_forward_timer: int = 0 //used to make sure we dont check the stop line inorder to continue forward

  state pid_Kp: float = 0.133;
  state pid_Ki: float = 0.00010;
  state pid_Kd: float = 0.0010;
  state pid_previous_error: float = 0

  state distance_before_turn: float = 0

  //Crane Related
  state crane_countdown_count: int = 0

  //Localization
  state vehicle_distance_location: float = 0
  state encoder_distance_at_finish: float = 0

  state vehicle_location_area_count: int = 0
  state loc_area_count_debouncer_time: int = 0 //needed to debounce so that the conut is only increased one time
  state vehicle_car_id: int = 0

  state second_vehicle_location_area_count: int = 4


  //Cargo Related 
  state moving_forward_step_timer: int = 0

  reaction(startup) {=
    // Set up our UART with the required speed.
    uart_init(UART_ID, BAUD_RATE);
    // Set the TX and RX pins by using the function select on the GPIO
    // Set datasheet for more information on function select
    printf("Setting up the UART GPIO Pins");
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  =}

  reaction(trigger_time) -> line.trigger, gyro.trigger, encoder.trigger {=
    lf_set(line.trigger, true);
    lf_set(gyro.trigger, true);
    lf_set(encoder.trigger, true);
  =}

  reaction(trigger_time) {= 
    //Debouncing so that a pass isn't counted multiple times. 

    //Debouncing the location area count so that it doesn't count more than once within 50 * 25 ms.
    if (self->loc_area_count_debouncer_time != 0 && self->loc_area_count_debouncer_time >= 32) {
      self->loc_area_count_debouncer_time = 0; //resets to zero when 200 ms has passed. 
    } else if (self->loc_area_count_debouncer_time != 0) {
      self->loc_area_count_debouncer_time = self->loc_area_count_debouncer_time + 1; //triggering each unit time. each 1 unit is = trigger.time interval
    }

  =}

  //Decrements the driving forward timer by 1 each 100ms
  reaction (driving_forward_timer) {= 
     if (self->temp_driving_forward_timer != 0) {
      self->temp_driving_forward_timer = self->temp_driving_forward_timer - 1;
     }
  =}

  reaction (crane_countdown_timer) {=
    if (self->crane_countdown_count != 0) {
      self->crane_countdown_count = self->crane_countdown_count - 1;
    }
  =}

  reaction(button_trigger_time) -> buttons.trigger {=
    lf_set(buttons.trigger, true);
  =}

  reaction(encoder.left, encoder.right) -> angleToDistance.degrees {=
    float encoder_avg = (encoder.left->value + encoder.right->value) / 2;
    lf_set(angleToDistance.degrees, encoder_avg);
  =}


  initial mode MAIN_MENU_MODE {
      //Menu for the Cargo 
      //Uses Buttons to control which mode to be in.
      reaction(t) -> disp.line0, disp.line1, disp.line2, disp.line3, motor.left_power, motor.right_power{= 
        static char buf0[17];
        static char buf1[17];
        static char buf2[17];
        static char buf3[17];
        snprintf(buf0, 17, "[A]: Calibration Mode");
        snprintf(buf1, 17, "[B]: DRIVE Mode");
        snprintf(buf2, 17, "[C]: .... Extra");
        snprintf(buf3, 17, " ");
        lf_set(motor.left_power, 0);
        lf_set(motor.right_power, 0);
        lf_set(disp.line0, buf0);
        lf_set(disp.line1, buf1);
        lf_set(disp.line2, buf2);
        lf_set(disp.line3, buf3);
      =}

      //Checking buttons
      reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> CALIBRATION_MODE, DRIVE_MODE, EXTRA_MODE, motor.left_power, motor.right_power {=
        if (buttons.button_a->value) {
          lf_set_mode(CALIBRATION_MODE);
        } else if (buttons.button_b->value) {
          lf_set(motor.left_power, 0.075f);
          lf_set(motor.right_power, 0.075f);
          lf_set_mode(DRIVE_MODE);
        } else if (buttons.button_c->value) {
          lf_set_mode(EXTRA_MODE);
        }
      =}
  }

  mode CALIBRATION_MODE { 
    /* Going back to the main menu */
    reaction(buttons.button_c) -> MAIN_MENU_MODE {=
      if(buttons.button_c->value) {
        self->calibration_startup = true; //Resetting the calibration values
        self->calibration_time_count = 0;
        lf_set_mode(MAIN_MENU_MODE);
      }
    =}

    /* Entering the Calibration mode and stops it after x amount of seconds*/
    reaction(seconds) -> line.calibrate, disp.line0, disp.line1, disp.line2, disp.line3 {=
      if (self->calibration_startup) {
        lf_set(disp.line0, "CALIBRATING");
        lf_set(disp.line1, "Roll robot over");
        lf_set(disp.line2, "light and dark.");
        static char buf[17];
        snprintf(buf, 17, "time:%8d s", self->calibration_time_count++);
        lf_set(disp.line3, buf);
        lf_set(line.calibrate, true);
        if (self->calibration_time_count > 10) {
          lf_set(line.calibrate, false);
          self->calibration_startup = false;
        }
      }

    =}

    /* After calibration mode, allows for users to see on the LED screen the line encoder values*/
    reaction(line.reflect) -> disp.line0, disp.line1, disp.line2, disp.line3 {=
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];
      static char buf3[17];
      snprintf(buf0, 17, "0:%4d 1:%4d", line.reflect->value[0], line.reflect->value[1]);
      snprintf(buf1, 17, "2:%4d 3:%4d", line.reflect->value[2], line.reflect->value[3]);
      snprintf(buf2, 17, "4:%4d", line.reflect->value[4]);
      snprintf(buf3, 17, "Main Menu: [C]");
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
      lf_set(disp.line3, buf3);
    =}
  }

  mode DRIVE_MODE {
    reaction(trigger_time) line.reflect ,gyro.z, angleToDistance.distance -> ARRIVED_STOP_MODE, motor.left_power, motor.right_power, disp.line0, disp.line1, disp.line2, disp.line3 {= 
      //Logic for driving
      //Printing to the LED Screen
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];
      static char buf3[17];

      //Stops the Vehicle if the ARRIVAL STOP lines are detected
      uint32_t ARRIVAL_STOP_LOW_VALUE = 400;
      uint32_t ARRIVAL_STOP_MAX_VALUE = 900;
      if (line.reflect->value[0] >= ARRIVAL_STOP_LOW_VALUE
          && line.reflect->value[1] >= ARRIVAL_STOP_LOW_VALUE
          && line.reflect->value[3] >= ARRIVAL_STOP_LOW_VALUE
          && line.reflect->value[4] >= ARRIVAL_STOP_LOW_VALUE
          && line.reflect->value[0] <= ARRIVAL_STOP_MAX_VALUE
          && line.reflect->value[1] <= ARRIVAL_STOP_MAX_VALUE
          && line.reflect->value[3] <= ARRIVAL_STOP_MAX_VALUE
          && line.reflect->value[4] <= ARRIVAL_STOP_MAX_VALUE
          && self->temp_driving_forward_timer == 0) {
            snprintf(buf0, 17, "Transitioning to ARRIVED MODE");
            snprintf(buf1, 17, " ");
            snprintf(buf2, 17, " ");
            snprintf(buf3, 17, "Main Menu: [C]");
            lf_set(motor.left_power, 0);
            lf_set(motor.right_power, 0);
            lf_set(disp.line0, buf0);
            lf_set(disp.line1, buf1);
            lf_set(disp.line2, buf2);
            lf_set(disp.line3, buf3);
            uart_putc_raw(UART_ID, 'L');
            self->crane_countdown_count = 30; //Setting it so that it waits in the ARRIVED Mode 
            lf_set_mode(ARRIVED_STOP_MODE);
      }

      //Calculates the distance traveled by the vehicle
      self->vehicle_distance_location = angleToDistance.distance->value;

      

      //Checking if the vehicle drove over the green line. 
      uint32_t START_LINE_VALUE = 150;
      uint32_t START_MAX_LINE_VALUE = 400;
      if (line.reflect->value[0] >= START_LINE_VALUE
          && line.reflect->value[1] >= START_LINE_VALUE
          && line.reflect->value[3] >= START_LINE_VALUE
          && line.reflect->value[4] >= START_LINE_VALUE
          && line.reflect->value[0] < START_MAX_LINE_VALUE
          && line.reflect->value[1] < START_MAX_LINE_VALUE
          && line.reflect->value[3] < START_MAX_LINE_VALUE
          && line.reflect->value[4] < START_MAX_LINE_VALUE
          && self->loc_area_count_debouncer_time == 0) {
          // self->encoder_distance_at_finish = angleToDistance.distance->value; //resets the vehicle distance location
          uart_putc_raw(UART_ID, 'Z');
          self->vehicle_location_area_count = self->vehicle_location_area_count + 1; //resets the vehicle distance location
          self->loc_area_count_debouncer_time = self->loc_area_count_debouncer_time + 1;
      }

      //Handles Localization so that the vehicles don't come near each other
      //Pushes a car to standby mode if the vehicles come close to each other
      //Localization Logic to count this area the vehicle is in.
      //Logic if the vehicle is with a ID of 0. ID = 0 means the vehicle is the first car.
      // if ( ((self->vehicle_location_area_count % 6) - self->second_vehicle_location_area_count) <= 1 && self->vehicle_car_id == 0) { 
      //   //Checks and makes sure that the two vehicles are never in the same area. 
      //   //If the two vehicles are in the same area, the second vehicle starts.
      //   lf_set(motor.left_power, 0);
      //   lf_set(motor.right_power, 0);
      //   lf_set_mode(DRIVE_STANDBY_MODE); 
      // }

      // //Logic if the vehicle is with a ID of 1. ID = 1 means the vehicle is the second car.
      // if ( ((self->vehicle_location_area_count % 6) - self->second_vehicle_location_area_count) <= 1 && self->vehicle_car_id == 1) { 
      //   //Checks and makes sure that the two vehicles are never in the same area. 
      //   //If the two vehicles are in the same area, the second vehicle starts.
      //   lf_set(motor.left_power, 0);
      //   lf_set(motor.right_power, 0);
      //   lf_set_mode(DRIVE_STANDBY_MODE); 
      // }

      //Robot: Aim to keep the robot moving forward by 
      //using the center line sensor which is line[2] and PID Control

      //Driving Related - PID Controller Variable Declarations
      float expected_value = 0; //expected difference that we want 
      // float current_value = line.reflect->value[3] - line.reflect->value[1]; //using the difference between the center line sensors
      float current_value = (line.reflect->value[4] + line.reflect->value[3]) - (line.reflect->value[1] + line.reflect->value[0]); //using the difference between the center line sensors

      float current_error = (expected_value - current_value) / 1000;  //Expected Sensor value - current Sensor value. 

      float pid_proportional_term_error = current_error; 
      float pid_integral_term_error = (pid_integral_term_error * 0.15) + current_error; //equivalent to taking the integral of the error
      float pid_differential_term_error =  (current_error - self->pid_previous_error)/0.15; //equivalent to taking the derivative of the error

      float pid_proportional_term = self->pid_Kp * pid_proportional_term_error; 
      float pid_integral_term = self->pid_Ki * pid_integral_term_error;         
      float pid_differential_term = self->pid_Kd * pid_differential_term_error;

      //Using CLEGG Integrator to handle the integral windup 
      //Resets the pid_integral_term_error to zero to avoid overshooting 
      if (current_error == 0) { 
        pid_integral_term_error == 0;
      }

      float pid_value = pid_proportional_term + pid_integral_term + pid_differential_term;
      self->pid_previous_error = current_error;

      float expected_motor_power = 0.075; //when there is no error. motor values for it to go straight

      //Adjusting the Motor powers based on the PID values
      float left_side_motor_power = expected_motor_power - pid_value;
      float right_side_motor_power = expected_motor_power + pid_value;

      //Setting minimum and maximum speed values
      float max_motor_speed = 0.30;
      float min_motor_speed = -0.30;

      if (left_side_motor_power > max_motor_speed) {
        left_side_motor_power = max_motor_speed;
      }
      if (left_side_motor_power < min_motor_speed) {
        left_side_motor_power = min_motor_speed;
      }
      if (right_side_motor_power > max_motor_speed) {
        right_side_motor_power = max_motor_speed;
      }
      if (right_side_motor_power < min_motor_speed) {
        right_side_motor_power = min_motor_speed;
      }

      // snprintf(buf0, 17, "E:%f", current_error);
      snprintf(buf0, 17, "POS: %f", self->vehicle_distance_location);
      snprintf(buf1, 17, "PID: %f", pid_value);
      snprintf(buf2, 17, "Cnt Loc: %i", self->vehicle_location_area_count);
      snprintf(buf3, 17, "Loc %i", self->vehicle_location_area_count % 6);

      lf_set(motor.left_power, left_side_motor_power);
      lf_set(motor.right_power, right_side_motor_power);
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
      lf_set(disp.line3, buf3);
    =} 

    reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> MAIN_MENU_MODE, motor.left_power, motor.right_power {=
      if (buttons.button_c->value) {
        lf_set(motor.left_power, 0);
        lf_set(motor.right_power, 0);
        lf_set_mode(MAIN_MENU_MODE);
      } 
    =}
  }

  // mode DRIVE_STANDBY_MODE {
  //   reaction(trigger_time) -> DRIVE_MODE, motor.left_power, motor.right_power {= 
  //     //Handles Localization so that the vehicles don't come near each other
  //     //Pushes a car to standby mode if the vehicles come close to each other
  //     //Localization Logic to count this area the vehicle is in.
  //     //Logic if the vehicle is with a ID of 0. ID = 0 means the vehicle is the first car.
  //     if ( ((self->vehicle_location_area_count % 6) - self->second_vehicle_location_area_count) > 1 && self->vehicle_car_id == 0) { 
  //       //Checks and makes sure that the two vehicles are never in the same area. 
  //       //If the two vehicles are in the same area, the second vehicle starts.
  //       lf_set(motor.left_power, 0.075);
  //       lf_set(motor.right_power, 0.075);
  //       lf_set_mode(DRIVE_MODE); 
  //     }

  //     //Logic if the vehicle is with a ID of 1. ID = 1 means the vehicle is the second car.
  //     if ( ((self->vehicle_location_area_count % 6) - self->second_vehicle_location_area_count) > 1 && self->vehicle_car_id == 1) { 
  //       //Checks and makes sure that the two vehicles are never in the same area. 
  //       //If the two vehicles are in the same area, the second vehicle starts.
  //       lf_set(motor.left_power, 0.075);
  //       lf_set(motor.right_power, 0.075);
  //       lf_set_mode(DRIVE_MODE); 
  //     }
    
  //   =}
  //   reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> MAIN_MENU_MODE, motor.left_power, motor.right_power {=
  //     if (buttons.button_c->value) {
  //       lf_set(motor.left_power, 0);
  //       lf_set(motor.right_power, 0);
  //       lf_set_mode(MAIN_MENU_MODE);
  //     } 
  //   =}
  // }


  //Temporarily goes into STOP Mode then transitions 
  mode ARRIVED_STOP_MODE {

    reaction(startup) {=
      // uart_putc_raw(UART_ID, 'L');
    =}
    //Checking buttons
    // reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> MOVE_FORWARD, motor.left_power, motor.right_power {=
    //   if (buttons.button_c->value) {
    //     lf_set(motor.left_power, 0.1f);
    //     lf_set(motor.right_power, 0.1f);
    //     lf_set_mode(MOVE_FORWARD);
    //   } 
    // =}
    reaction(trigger_time) buttons.button_c -> DRIVE_MODE, disp.line0, disp.line1, disp.line2,disp.line3, motor.left_power, motor.right_power{=
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];
      static char buf3[17];
      //gyro.z = -90, angle_before_turn = -10, result = -80
      snprintf(buf0, 17, "ARRIVED STOP MODE");
      snprintf(buf1, 17, "Countdown Timer:");
      snprintf(buf2, 17, "C: %i", self->crane_countdown_count);
      snprintf(buf3, 17, "Continue: [C]");
      lf_set(motor.left_power, 0);
      lf_set(motor.right_power, 0);
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
      lf_set(disp.line3, buf3);
      if (self->crane_countdown_count == 0 || buttons.button_c->value) {
      // if (uart_getc(UART_ID) == 'C' || buttons.button_c->value) {
        //Goes to a temporary transition state if we receive the 'C' UART signal or a button press
        self->temp_driving_forward_timer = 10; //timer to make sure it doesnt stop again due to the gray line
        lf_set(motor.left_power, 0.1f);
        lf_set(motor.right_power, 0.1f);
        lf_set_mode(DRIVE_MODE);
      }
      while(uart_is_readable(UART_ID)) {
        uint8_t ch = uart_getc(UART_ID);
        if (ch == 'C') {
          self->temp_driving_forward_timer = 10; //timer to make sure it doesnt stop again due to the gray line
          lf_set(motor.left_power, 0.1f);
          lf_set(motor.right_power, 0.1f);
          lf_set_mode(DRIVE_MODE);
        }
      }
    =}
  }

  mode EXTRA_MODE {
    //Extra Menus and options for the car
    reaction(t) -> disp.line0, disp.line1, disp.line2, disp.line3 {=
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];
      static char buf3[17];
      snprintf(buf0, 17, "EXTRA MODE");
      snprintf(buf1, 17, "[A]: PID K Values");
      snprintf(buf2, 17, " ");
      snprintf(buf3, 17, "Main Menu: [C]");
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
      lf_set(disp.line3, buf3);
    =}

    //Checking buttons
    reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> MAIN_MENU_MODE, PID_VALUE_MODE, motor.left_power, motor.right_power {=
    
      if (buttons.button_c->value) {
        lf_set(motor.left_power, 0);
        lf_set(motor.right_power, 0);
        lf_set_mode(MAIN_MENU_MODE);
      } else if (buttons.button_a->value) {
        lf_set(motor.left_power, 0);
        lf_set(motor.right_power, 0);
        lf_set_mode(PID_VALUE_MODE);
      } 
    =}
  }

  mode PID_VALUE_MODE { 
    reaction(t) -> disp.line0, disp.line1, disp.line2, disp.line3 {=
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];
      static char buf3[17];
      snprintf(buf0, 17, "Prop. K: %f", self->pid_Kp);
      snprintf(buf1, 17, "Integral K: %f", self->pid_Ki);
      snprintf(buf2, 17, "Diff. K: %f", self->pid_Kd);
      snprintf(buf3, 17, "Main Menu: [C]");
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
      lf_set(disp.line3, buf3);
    =}

    reaction(buttons.button_a, buttons.button_b, buttons.button_c) -> MAIN_MENU_MODE{=
      if (buttons.button_c->value) {
        lf_set_mode(MAIN_MENU_MODE);
      } 
    =}
  }


}